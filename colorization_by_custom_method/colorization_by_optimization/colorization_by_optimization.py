from PIL import ImageTk
from PIL import Image
import cv2
import numpy as np
import math
import random
import matplotlib.pyplot as plt
import colorsys
from scipy import sparse
from scipy.sparse import linalg

class ColorizationByOptimization:
    """
       论文 Colorization using Optimization 图像上色部分复现，尽可能的保持了时间、空间上的连续性
       支持灰度图上色，也支持彩色图重上色
       支持用户手工交互式上色，也支持传入事先标记好的图片进行上色
    """
    np.set_printoptions(precision=8, suppress=True)
    manual_color_list = []
    def __init__(self, source_image):
        """
        传入要上色的图像，先将source_image_origin_array_rgb和source_image_marked_array_rgb都置为其
        :param source_image:
        """
        self.source_image_rgb = source_image
        self.source_image_origin_array_rgb = np.array(self.source_image_rgb).astype(float)/255
        self.source_image_marked_array_rgb = np.array(self.source_image_rgb).astype(float)/255
        self.width = len(source_image[0])
        self.height = len(source_image)
        self.window_width = 1 # 领域宽度
        print(self.width,self.height)

    def manual_color(self,row,col,color):
        """
        配合外层的交互式指定颜色，给row,col处的像素指定颜色color
        :param row: 像素行
        :param col: 像素列
        :param color: 指定颜色
        :return: None
        """
        if row<0 or row>=self.height-1 or col<0 or col>=self.width-1:
            return
        self.manual_color_list.append([row,col,color])
        self.source_image_marked_array_rgb[row][col] = [color[0]/255,color[1]/255,color[2]/255]
        self.source_image_marked_array_rgb[row][col+1] = [color[0] / 255, color[1] / 255, color[2] / 255]
        self.source_image_marked_array_rgb[row+1][col + 1] = [color[0] / 255, color[1] / 255, color[2] / 255]
        self.source_image_marked_array_rgb[row + 1][col] = [color[0] / 255, color[1] / 255, color[2] / 255]

    def manually_set_marked_image(self,marked_array):
        """
        用于设置事先标记好的图片
        :param marked_array: 标记好的图片
        :return:
        """
        self.source_image_marked_array_rgb = np.array(marked_array).astype(float)/255

    def set_recolor_area(self,row1,row2,col1,col2):
        """
        设置重上色区域，设置重上色区域的时候需要将重上色区域外的像素都置为白色，以使其不被指定的重上色区域内的因素影响，
        从而在上色阶段从源彩色图像中拿到补偿像素值
        :return:None，直接对self.source_image_marked_array_rgb进行了操作
        """
        # 保证row1<row2 且 col1<col2
        if row1>row2:
            temp = row1
            row1 = row2
            row2 = temp
        if col1 > col2:
            temp = col1
            col1 = col2
            col2 = temp
        new_marked = np.ones(self.source_image_origin_array_rgb.shape)
        new_marked[row1:row2, col1:col2] = self.source_image_marked_array_rgb[row1:row2, col1:col2]
        self.source_image_marked_array_rgb = new_marked

    def show_origin_pic(self):
        """
        显示原图像
        :return:   None
        """
        show_pic = self.source_image_origin_array_rgb.astype(np.float32)
        cv2.imshow("origin", cv2.cvtColor(show_pic, cv2.COLOR_RGB2BGR))

    def show_marked_pic(self):
        """
        显示标记图像
        :return:  None
        """
        show_pic = self.source_image_marked_array_rgb.astype(np.float32)
        cv2.imshow("marked",cv2.cvtColor(show_pic,cv2.COLOR_RGB2BGR))

    def colorization(self,is_recolor=False,debug_mode=False):
        """
        上色主函数，is_recolor 指示是否为图像重上色
        :param is_recolor:  【 true: 彩色图像重上色  false:灰度图像上色 】
        :return: 上色结果
        """
        self.show_marked_pic()
        self.show_origin_pic()

        pic_rows = self.source_image_origin_array_rgb.shape[0]
        pic_cols = self.source_image_origin_array_rgb.shape[1]
        pic_size = pic_rows * pic_cols

        if debug_mode:
            color_res = np.zeros((pic_rows,pic_cols))
            for r in range(pic_rows):
                for c in range(pic_cols):
                    color_res[r][c] = self.is_colored(r,c)
            cv2.imshow("color_res",color_res)
            cv2.waitKey(0)

        # 转换至 YIQ空间
        pic_origin_YIQ_result = self.rgb_channels_to_yuv(self.source_image_origin_array_rgb[:, :, 0], self.source_image_origin_array_rgb[:, :, 1], self.source_image_origin_array_rgb[:, :, 2])
        pic_marked_YIQ_result = self.rgb_channels_to_yuv(self.source_image_marked_array_rgb[:, :, 0], self.source_image_marked_array_rgb[:, :, 1], self.source_image_marked_array_rgb[:, :, 2])

        # 合成 yiq/yuv 图片
        channel_Y = pic_origin_YIQ_result[0]
        channel_U = pic_marked_YIQ_result[1]
        channel_V = pic_marked_YIQ_result[2]
        self.pic_yuv = np.dstack((channel_Y, channel_U, channel_V))

        # 计算权重矩阵，为解优化问题做铺垫
        print("constructing weight Matrix")
        weightData = []
        # 建立weight矩阵
        for r in range(pic_rows):
            for c in range(pic_cols):
                w = Neighbors(self.window_width, (r, c), self.pic_yuv)
                if not self.is_colored(r, c):
                    weights = w.affinity_function()
                    for e in weights:
                        weightData.append([(r, c), (e[0], e[1]), e[2]])
                weightData.append([(r, c), (r, c), 1.])

        # 构造稀疏矩阵
        sparse_index_rc_data = [[e[0][0] + e[0][1] * pic_rows, e[1][0] + e[1][1] * pic_rows, e[2]] for e in weightData]
        sparse_index_rc = np.array(sparse_index_rc_data, dtype=np.integer)[:, 0:2]
        sparse_data = np.array(sparse_index_rc_data, dtype=np.float64)[:, 2]
        matA = sparse.csr_matrix((sparse_data, (sparse_index_rc[:, 0], sparse_index_rc[:, 1])), shape=(pic_size, pic_size))

        b_u = np.zeros(pic_size)
        b_v = np.zeros(pic_size)

        # 展平u通道到一个整的向量
        pic_u_flat = self.pic_yuv[:, :, 1].reshape(pic_size, order='F')
        i = 0
        for each in pic_u_flat:
            import math
            row = i % pic_rows
            col = math.floor(i / pic_rows)
            if self.is_colored(row, col):
                b_u[i] = pic_u_flat[i]
            i = i + 1

        # 展平v通道到一个整的向量
        pic_v_flat = self.pic_yuv[:, :, 2].reshape(pic_size, order='F')
        i = 0
        for each in pic_v_flat:
            import math
            row = i % pic_rows
            col = math.floor(i / pic_rows)
            if self.is_colored(row, col):
                b_v[i] = pic_v_flat[i]
            i = i + 1

        # 解线性方程组
        print("start optimization")
        ansY = self.pic_yuv[:, :, 0].reshape(pic_size, order='F')
        ansU = linalg.spsolve(matA, b_u)
        print("U channel optimized")
        ansV = linalg.spsolve(matA, b_v)
        print("V channel optimized")
        # 构造上完色的YUV空间的图像
        colorizedYUV = np.zeros(self.pic_yuv.shape)
        colorizedYUV[:, :, 0] = ansY.reshape((pic_rows, pic_cols), order='F')
        colorizedYUV[:, :, 1] = ansU.reshape((pic_rows, pic_cols), order='F')
        colorizedYUV[:, :, 2] = ansV.reshape((pic_rows, pic_cols), order='F')
        if debug_mode:
            temp1 = np.array(abs(colorizedYUV[:, :, 1]))
            cv2.imshow("result YUV channel U", temp1)
            cv2.waitKey(0)
            print(temp1)
            temp2 = np.array(abs(colorizedYUV[:, :, 2]))
            cv2.imshow("result YUV channel V", temp2)
            cv2.waitKey(0)
            print(temp2)

        # 得到结果
        colorizedRGB = self.yuv_channels_to_rgb(colorizedYUV)
        colorizedRGB = colorizedRGB.astype(np.float32)
        if debug_mode:
            cv2.imshow("inner_colorizedRGB",colorizedRGB)
            cv2.waitKey(0)


        ## 如果是重上色模式，那么需要做一下处理
        if is_recolor:
            U_threshold = 0
            V_threshold = 0
            count1 = 0
            count2 = 0
            for each_row in colorizedYUV:
                col = 0
                for each_pixel in each_row:
                    if abs(each_pixel[1]) > 0.03:
                        U_threshold = U_threshold + abs(each_pixel[1])
                        count1 = count1 + 1
                    if abs(each_pixel[2]) > 0.03:
                        V_threshold = V_threshold + abs(each_pixel[2])
                        count2 = count2 + 1
            if count1 != 0:
                U_threshold = U_threshold / count1
            else:
                U_threshold = 1
            if count2 != 0:
                V_threshold = V_threshold / count2
            else:
                V_threshold = 1

            print("U_threshold,V_threshold", U_threshold, V_threshold)
            row, col = 0, 0
            for each_row in colorizedYUV:
                col = 0
                for each_pixel in each_row:
                    if abs(each_pixel[1]) < U_threshold*0.35 and abs(each_pixel[2]) < V_threshold*0.35:
                        colorizedRGB[row][col][0] = self.source_image_origin_array_rgb[row][col][0]
                        colorizedRGB[row][col][1] = self.source_image_origin_array_rgb[row][col][1]
                        colorizedRGB[row][col][2] = self.source_image_origin_array_rgb[row][col][2]
                    col = col + 1
                row = row + 1

        # 得到结果
        # cv2.imshow("pic_ans",cv2.cvtColor(colorizedRGB,cv2.COLOR_RGB2BGR))
        colorizedBRG = cv2.cvtColor(colorizedRGB, cv2.COLOR_RGB2BGR)
        return colorizedBRG

    def yuv_channels_to_rgb(self,colorizedYUV):
        """
        YUV（实为YIQ） 转 RGB
        :param colorizedYUV:
        :return:
        """
        cY = colorizedYUV[:,:,0]
        cU = colorizedYUV[:, :, 1]
        cV = colorizedYUV[:,:,2]

        r = cY + 0.948262 * cU + 0.624013 * cV
        g = cY - 0.276066 * cU - 0.639810 * cV
        b = cY - 1.105450 * cU + 1.729860 * cV
        r[r < 0] = 0
        r[r > 1] = 1
        g[g < 0] = 0
        g[g > 1] = 1
        b[b < 0] = 0
        b[b > 1] = 1
        colorizedRGB = np.zeros(colorizedYUV.shape)
        colorizedRGB[:, :, 0] = r
        colorizedRGB[:, :, 1] = g
        colorizedRGB[:, :, 2] = b
        return colorizedRGB

    def rgb_channels_to_yuv(self,cR,cG,cB):
        return colorsys.rgb_to_yiq(cR, cG, cB)

    def is_colored(self, row, col):
        """
        像素row,col是否倍指定上色
        :param row:
        :param col:
        :return:
        """
        return abs(self.source_image_origin_array_rgb[row][col] - self.source_image_marked_array_rgb[row][col]).sum() > 0.01

class Neighbors:

    def __init__(self, width, center, pic):
        """
       :param width: 窗口大小
       :param center: 该点的r,c坐标值
       :param pic: 图像
       """
        self.center = [center[0], center[1], pic[center][0]]
        self.width = width
        self.neighbors = None
        self.find_neighbors(pic)

    def find_neighbors(self, pic):
        """
       寻找到该点的邻域，并添加进入neighbors数组中
       :param pic: yuv图像
       :return: None,过程中直接操作self.neighbors
       """
        # 注意neighbors里面每个元素也是一个list，其格式为：[r,c,y]，前两个r,c为像素在图像中的坐标，y为像素灰度值
        # neighbors的寻找旨在为后续计算权重矩阵做准备
        self.neighbors = []
        ix_r_min = max(0, self.center[0] - self.width)
        ix_r_max = min(pic.shape[0], self.center[0] + self.width + 1)
        ix_c_min = max(0, self.center[1] - self.width)
        ix_c_max = min(pic.shape[1], self.center[1] + self.width + 1)
        for r in range(ix_r_min, ix_r_max):
            for c in range(ix_c_min, ix_c_max):
                if r == self.center[0] and c == self.center[1]:
                    continue
                self.neighbors.append([r,c,pic[r,c,0]])

    def affinity_function(self):
        """
        通过self.neighbors来计算邻居们的权重
        :return: neighbors_array 格式如下：其为一个list，
        list内每个元素也是一个list，每个元素代表格式为：[r,c,weight],r,c为neighbor的坐标，weight为该邻居的权重值
        """
        neighbors_array = np.array(self.neighbors)
        # 计算Y通道象素茶
        sY = neighbors_array[:,2]
        cY = self.center[2]
        diff = sY - cY
        sig = np.var(np.append(sY, cY))
        if sig < 1e-6:
            sig = 1e-6
        weight = np.exp(- np.power(diff,2) / (sig * 2.0))
        weight = - weight / np.sum(weight)
        neighbors_array[:,2] = weight
        return neighbors_array


# 使用示例：

# Case1: 使用事先准备好的标记图片进行灰度图像上色
# source_image = "./images/method2_example/m2_color_origin_example1.bmp"
# marked_image = "./images/method2_example/m2_color_marked_example1.bmp"
# op = ColorizationByOptimization(Image.open(source_image))
# op.manually_set_marked_image(Image.open(marked_image))
# result_bgr = op.colorization(is_recolor=False)
# cv2.imshow("color-sample",result_bgr)
# cv2.waitKey(0)


# Case2: 使用事先准备好的标记图片进行彩色图像重上色
# source_image = "./images/method2_example/m2_recolor_origin_example1.bmp"
# marked_image = "./images/method2_example/m2_recolor_marked_example1.bmp"
# op = ColorizationByOptimization(Image.open(source_image))
# op.manually_set_marked_image(Image.open(marked_image))
# result_bgr = op.colorization(is_recolor=True)
# cv2.imshow("recolor-sample",result_bgr)
# cv2.waitKey(0)


# Case3: 交互式指定进行灰度图像上色
# 以下interactive_list为准备好的测试交互数据，实际应用中可以通过不停的调用manual_color函数进行设置
# interactive_list = [[76, 57, (255.99609375, 0.0, 0.0)], [78, 57, (255.99609375, 0.0, 0.0)], [79, 57, (255.99609375, 0.0, 0.0)], [81, 57, (255.99609375, 0.0, 0.0)], [82, 57, (255.99609375, 0.0, 0.0)], [84, 57, (255.99609375, 0.0, 0.0)], [85, 57, (255.99609375, 0.0, 0.0)], [87, 57, (255.99609375, 0.0, 0.0)], [88, 57, (255.99609375, 0.0, 0.0)], [89, 57, (255.99609375, 0.0, 0.0)], [90, 58, (255.99609375, 0.0, 0.0)], [91, 58, (255.99609375, 0.0, 0.0)], [92, 58, (255.99609375, 0.0, 0.0)], [93, 58, (255.99609375, 0.0, 0.0)], [94, 59, (255.99609375, 0.0, 0.0)], [95, 59, (255.99609375, 0.0, 0.0)], [96, 59, (255.99609375, 0.0, 0.0)], [97, 59, (255.99609375, 0.0, 0.0)], [98, 59, (255.99609375, 0.0, 0.0)], [99, 60, (255.99609375, 0.0, 0.0)], [100, 60, (255.99609375, 0.0, 0.0)], [102, 61, (255.99609375, 0.0, 0.0)], [103, 62, (255.99609375, 0.0, 0.0)], [104, 63, (255.99609375, 0.0, 0.0)], [105, 64, (255.99609375, 0.0, 0.0)], [106, 65, (255.99609375, 0.0, 0.0)], [107, 66, (255.99609375, 0.0, 0.0)], [108, 67, (255.99609375, 0.0, 0.0)], [108, 68, (255.99609375, 0.0, 0.0)], [109, 68, (255.99609375, 0.0, 0.0)], [110, 69, (255.99609375, 0.0, 0.0)], [110, 70, (255.99609375, 0.0, 0.0)], [111, 71, (255.99609375, 0.0, 0.0)], [111, 72, (255.99609375, 0.0, 0.0)], [112, 72, (255.99609375, 0.0, 0.0)], [112, 73, (255.99609375, 0.0, 0.0)], [112, 75, (255.99609375, 0.0, 0.0)], [113, 76, (255.99609375, 0.0, 0.0)], [113, 77, (255.99609375, 0.0, 0.0)], [113, 79, (255.99609375, 0.0, 0.0)], [113, 80, (255.99609375, 0.0, 0.0)], [113, 81, (255.99609375, 0.0, 0.0)], [113, 82, (255.99609375, 0.0, 0.0)], [113, 83, (255.99609375, 0.0, 0.0)], [113, 84, (255.99609375, 0.0, 0.0)], [112, 84, (255.99609375, 0.0, 0.0)], [112, 85, (255.99609375, 0.0, 0.0)], [111, 86, (255.99609375, 0.0, 0.0)], [110, 87, (255.99609375, 0.0, 0.0)], [110, 88, (255.99609375, 0.0, 0.0)], [109, 88, (255.99609375, 0.0, 0.0)], [109, 89, (255.99609375, 0.0, 0.0)], [108, 90, (255.99609375, 0.0, 0.0)], [108, 91, (255.99609375, 0.0, 0.0)], [107, 91, (255.99609375, 0.0, 0.0)], [106, 91, (255.99609375, 0.0, 0.0)], [106, 92, (255.99609375, 0.0, 0.0)], [105, 92, (255.99609375, 0.0, 0.0)], [104, 92, (255.99609375, 0.0, 0.0)], [103, 92, (255.99609375, 0.0, 0.0)], [102, 92, (255.99609375, 0.0, 0.0)], [101, 92, (255.99609375, 0.0, 0.0)], [100, 92, (255.99609375, 0.0, 0.0)], [99, 92, (255.99609375, 0.0, 0.0)], [98, 92, (255.99609375, 0.0, 0.0)], [97, 93, (255.99609375, 0.0, 0.0)], [96, 93, (255.99609375, 0.0, 0.0)], [95, 94, (255.99609375, 0.0, 0.0)], [93, 94, (255.99609375, 0.0, 0.0)], [92, 95, (255.99609375, 0.0, 0.0)], [91, 95, (255.99609375, 0.0, 0.0)], [90, 95, (255.99609375, 0.0, 0.0)], [90, 96, (255.99609375, 0.0, 0.0)], [89, 96, (255.99609375, 0.0, 0.0)], [88, 96, (255.99609375, 0.0, 0.0)], [87, 96, (255.99609375, 0.0, 0.0)], [86, 96, (255.99609375, 0.0, 0.0)], [85, 96, (255.99609375, 0.0, 0.0)], [84, 96, (255.99609375, 0.0, 0.0)], [84, 97, (255.99609375, 0.0, 0.0)], [83, 97, (255.99609375, 0.0, 0.0)], [82, 97, (255.99609375, 0.0, 0.0)], [81, 97, (255.99609375, 0.0, 0.0)], [80, 97, (255.99609375, 0.0, 0.0)], [79, 97, (255.99609375, 0.0, 0.0)], [78, 97, (255.99609375, 0.0, 0.0)], [77, 97, (255.99609375, 0.0, 0.0)], [76, 97, (255.99609375, 0.0, 0.0)], [75, 97, (255.99609375, 0.0, 0.0)], [74, 97, (255.99609375, 0.0, 0.0)], [74, 96, (255.99609375, 0.0, 0.0)], [51, 100, (21.08203125, 47.18359375, 255.99609375)], [50, 101, (21.08203125, 47.18359375, 255.99609375)], [49, 102, (21.08203125, 47.18359375, 255.99609375)], [46, 105, (21.08203125, 47.18359375, 255.99609375)], [45, 106, (21.08203125, 47.18359375, 255.99609375)], [44, 107, (21.08203125, 47.18359375, 255.99609375)], [43, 108, (21.08203125, 47.18359375, 255.99609375)], [42, 109, (21.08203125, 47.18359375, 255.99609375)], [42, 110, (21.08203125, 47.18359375, 255.99609375)], [42, 111, (21.08203125, 47.18359375, 255.99609375)], [42, 112, (21.08203125, 47.18359375, 255.99609375)], [42, 113, (21.08203125, 47.18359375, 255.99609375)], [42, 114, (21.08203125, 47.18359375, 255.99609375)], [42, 115, (21.08203125, 47.18359375, 255.99609375)], [42, 116, (21.08203125, 47.18359375, 255.99609375)], [42, 117, (21.08203125, 47.18359375, 255.99609375)], [42, 118, (21.08203125, 47.18359375, 255.99609375)], [42, 119, (21.08203125, 47.18359375, 255.99609375)], [42, 120, (21.08203125, 47.18359375, 255.99609375)], [42, 121, (21.08203125, 47.18359375, 255.99609375)], [42, 122, (21.08203125, 47.18359375, 255.99609375)], [42, 123, (21.08203125, 47.18359375, 255.99609375)], [42, 125, (21.08203125, 47.18359375, 255.99609375)], [43, 126, (21.08203125, 47.18359375, 255.99609375)], [44, 128, (21.08203125, 47.18359375, 255.99609375)], [44, 129, (21.08203125, 47.18359375, 255.99609375)], [45, 130, (21.08203125, 47.18359375, 255.99609375)], [45, 131, (21.08203125, 47.18359375, 255.99609375)], [46, 132, (21.08203125, 47.18359375, 255.99609375)], [47, 133, (21.08203125, 47.18359375, 255.99609375)], [47, 134, (21.08203125, 47.18359375, 255.99609375)], [48, 135, (21.08203125, 47.18359375, 255.99609375)], [48, 136, (21.08203125, 47.18359375, 255.99609375)], [49, 137, (21.08203125, 47.18359375, 255.99609375)], [50, 137, (21.08203125, 47.18359375, 255.99609375)], [50, 138, (21.08203125, 47.18359375, 255.99609375)], [51, 138, (21.08203125, 47.18359375, 255.99609375)], [52, 138, (21.08203125, 47.18359375, 255.99609375)], [53, 138, (21.08203125, 47.18359375, 255.99609375)], [54, 138, (21.08203125, 47.18359375, 255.99609375)], [55, 138, (21.08203125, 47.18359375, 255.99609375)], [56, 138, (21.08203125, 47.18359375, 255.99609375)], [57, 138, (21.08203125, 47.18359375, 255.99609375)], [58, 138, (21.08203125, 47.18359375, 255.99609375)], [59, 138, (21.08203125, 47.18359375, 255.99609375)], [60, 138, (21.08203125, 47.18359375, 255.99609375)], [60, 137, (21.08203125, 47.18359375, 255.99609375)], [61, 137, (21.08203125, 47.18359375, 255.99609375)], [62, 137, (21.08203125, 47.18359375, 255.99609375)], [63, 137, (21.08203125, 47.18359375, 255.99609375)], [63, 136, (21.08203125, 47.18359375, 255.99609375)], [64, 136, (21.08203125, 47.18359375, 255.99609375)], [65, 136, (21.08203125, 47.18359375, 255.99609375)], [65, 135, (21.08203125, 47.18359375, 255.99609375)], [66, 135, (21.08203125, 47.18359375, 255.99609375)], [67, 134, (21.08203125, 47.18359375, 255.99609375)], [68, 134, (21.08203125, 47.18359375, 255.99609375)], [69, 133, (21.08203125, 47.18359375, 255.99609375)], [70, 133, (21.08203125, 47.18359375, 255.99609375)], [71, 133, (21.08203125, 47.18359375, 255.99609375)], [71, 132, (21.08203125, 47.18359375, 255.99609375)], [72, 132, (21.08203125, 47.18359375, 255.99609375)], [73, 132, (21.08203125, 47.18359375, 255.99609375)], [74, 132, (21.08203125, 47.18359375, 255.99609375)], [74, 131, (21.08203125, 47.18359375, 255.99609375)], [75, 131, (21.08203125, 47.18359375, 255.99609375)], [76, 131, (21.08203125, 47.18359375, 255.99609375)], [76, 130, (21.08203125, 47.18359375, 255.99609375)], [77, 130, (21.08203125, 47.18359375, 255.99609375)], [76, 130, (21.08203125, 47.18359375, 255.99609375)], [75, 130, (21.08203125, 47.18359375, 255.99609375)], [66, 28, (0.0, 255.99609375, 0.0)], [65, 28, (0.0, 255.99609375, 0.0)], [64, 28, (0.0, 255.99609375, 0.0)], [63, 28, (0.0, 255.99609375, 0.0)], [62, 28, (0.0, 255.99609375, 0.0)], [61, 28, (0.0, 255.99609375, 0.0)], [60, 28, (0.0, 255.99609375, 0.0)], [58, 28, (0.0, 255.99609375, 0.0)], [57, 28, (0.0, 255.99609375, 0.0)], [55, 28, (0.0, 255.99609375, 0.0)], [52, 28, (0.0, 255.99609375, 0.0)], [50, 29, (0.0, 255.99609375, 0.0)], [49, 30, (0.0, 255.99609375, 0.0)], [47, 30, (0.0, 255.99609375, 0.0)], [45, 30, (0.0, 255.99609375, 0.0)], [44, 31, (0.0, 255.99609375, 0.0)], [43, 31, (0.0, 255.99609375, 0.0)], [42, 31, (0.0, 255.99609375, 0.0)], [40, 32, (0.0, 255.99609375, 0.0)], [39, 33, (0.0, 255.99609375, 0.0)], [37, 33, (0.0, 255.99609375, 0.0)], [36, 34, (0.0, 255.99609375, 0.0)], [36, 35, (0.0, 255.99609375, 0.0)], [35, 35, (0.0, 255.99609375, 0.0)], [35, 36, (0.0, 255.99609375, 0.0)], [35, 37, (0.0, 255.99609375, 0.0)], [34, 38, (0.0, 255.99609375, 0.0)], [34, 39, (0.0, 255.99609375, 0.0)], [34, 40, (0.0, 255.99609375, 0.0)], [34, 41, (0.0, 255.99609375, 0.0)], [34, 42, (0.0, 255.99609375, 0.0)], [34, 43, (0.0, 255.99609375, 0.0)], [34, 44, (0.0, 255.99609375, 0.0)], [35, 44, (0.0, 255.99609375, 0.0)], [35, 46, (0.0, 255.99609375, 0.0)], [35, 47, (0.0, 255.99609375, 0.0)], [35, 48, (0.0, 255.99609375, 0.0)], [36, 49, (0.0, 255.99609375, 0.0)], [36, 51, (0.0, 255.99609375, 0.0)], [37, 51, (0.0, 255.99609375, 0.0)], [37, 52, (0.0, 255.99609375, 0.0)], [38, 53, (0.0, 255.99609375, 0.0)], [38, 54, (0.0, 255.99609375, 0.0)], [39, 54, (0.0, 255.99609375, 0.0)], [39, 55, (0.0, 255.99609375, 0.0)], [40, 56, (0.0, 255.99609375, 0.0)], [41, 57, (0.0, 255.99609375, 0.0)], [41, 58, (0.0, 255.99609375, 0.0)], [42, 59, (0.0, 255.99609375, 0.0)], [42, 60, (0.0, 255.99609375, 0.0)], [42, 61, (0.0, 255.99609375, 0.0)], [43, 62, (0.0, 255.99609375, 0.0)], [43, 63, (0.0, 255.99609375, 0.0)], [44, 63, (0.0, 255.99609375, 0.0)], [44, 64, (0.0, 255.99609375, 0.0)], [44, 65, (0.0, 255.99609375, 0.0)], [45, 65, (0.0, 255.99609375, 0.0)], [9, 152, (252.984375, 255.99609375, 244.953125)], [10, 153, (252.984375, 255.99609375, 244.953125)], [11, 154, (252.984375, 255.99609375, 244.953125)], [12, 154, (252.984375, 255.99609375, 244.953125)], [13, 155, (252.984375, 255.99609375, 244.953125)], [14, 156, (252.984375, 255.99609375, 244.953125)], [15, 156, (252.984375, 255.99609375, 244.953125)], [16, 157, (252.984375, 255.99609375, 244.953125)], [17, 157, (252.984375, 255.99609375, 244.953125)], [17, 158, (252.984375, 255.99609375, 244.953125)], [18, 158, (252.984375, 255.99609375, 244.953125)], [18, 159, (252.984375, 255.99609375, 244.953125)], [19, 159, (252.984375, 255.99609375, 244.953125)], [20, 160, (252.984375, 255.99609375, 244.953125)], [21, 160, (252.984375, 255.99609375, 244.953125)], [22, 160, (252.984375, 255.99609375, 244.953125)], [23, 161, (252.984375, 255.99609375, 244.953125)], [24, 161, (252.984375, 255.99609375, 244.953125)], [25, 161, (252.984375, 255.99609375, 244.953125)], [26, 161, (252.984375, 255.99609375, 244.953125)], [27, 161, (252.984375, 255.99609375, 244.953125)], [28, 161, (252.984375, 255.99609375, 244.953125)], [29, 161, (252.984375, 255.99609375, 244.953125)], [30, 161, (252.984375, 255.99609375, 244.953125)], [31, 161, (252.984375, 255.99609375, 244.953125)], [32, 161, (252.984375, 255.99609375, 244.953125)], [33, 161, (252.984375, 255.99609375, 244.953125)], [34, 161, (252.984375, 255.99609375, 244.953125)], [35, 161, (252.984375, 255.99609375, 244.953125)], [36, 161, (252.984375, 255.99609375, 244.953125)], [37, 161, (252.984375, 255.99609375, 244.953125)], [38, 161, (252.984375, 255.99609375, 244.953125)], [39, 161, (252.984375, 255.99609375, 244.953125)], [40, 161, (252.984375, 255.99609375, 244.953125)], [41, 161, (252.984375, 255.99609375, 244.953125)], [42, 161, (252.984375, 255.99609375, 244.953125)], [43, 161, (252.984375, 255.99609375, 244.953125)], [44, 161, (252.984375, 255.99609375, 244.953125)], [46, 161, (252.984375, 255.99609375, 244.953125)], [47, 161, (252.984375, 255.99609375, 244.953125)], [48, 162, (252.984375, 255.99609375, 244.953125)], [49, 162, (252.984375, 255.99609375, 244.953125)], [50, 162, (252.984375, 255.99609375, 244.953125)], [51, 162, (252.984375, 255.99609375, 244.953125)], [53, 162, (252.984375, 255.99609375, 244.953125)], [54, 163, (252.984375, 255.99609375, 244.953125)], [56, 163, (252.984375, 255.99609375, 244.953125)], [58, 163, (252.984375, 255.99609375, 244.953125)], [60, 163, (252.984375, 255.99609375, 244.953125)], [62, 163, (252.984375, 255.99609375, 244.953125)], [64, 163, (252.984375, 255.99609375, 244.953125)], [66, 163, (252.984375, 255.99609375, 244.953125)], [68, 164, (252.984375, 255.99609375, 244.953125)], [70, 164, (252.984375, 255.99609375, 244.953125)], [72, 164, (252.984375, 255.99609375, 244.953125)], [74, 164, (252.984375, 255.99609375, 244.953125)], [76, 164, (252.984375, 255.99609375, 244.953125)], [77, 164, (252.984375, 255.99609375, 244.953125)], [78, 163, (252.984375, 255.99609375, 244.953125)], [79, 163, (252.984375, 255.99609375, 244.953125)], [80, 162, (252.984375, 255.99609375, 244.953125)], [81, 162, (252.984375, 255.99609375, 244.953125)], [82, 162, (252.984375, 255.99609375, 244.953125)], [82, 161, (252.984375, 255.99609375, 244.953125)], [83, 161, (252.984375, 255.99609375, 244.953125)], [84, 160, (252.984375, 255.99609375, 244.953125)], [85, 159, (252.984375, 255.99609375, 244.953125)], [86, 159, (252.984375, 255.99609375, 244.953125)], [87, 158, (252.984375, 255.99609375, 244.953125)], [88, 158, (252.984375, 255.99609375, 244.953125)], [88, 157, (252.984375, 255.99609375, 244.953125)], [89, 157, (252.984375, 255.99609375, 244.953125)], [90, 156, (252.984375, 255.99609375, 244.953125)], [91, 156, (252.984375, 255.99609375, 244.953125)], [92, 155, (252.984375, 255.99609375, 244.953125)], [93, 155, (252.984375, 255.99609375, 244.953125)], [94, 155, (252.984375, 255.99609375, 244.953125)], [94, 154, (252.984375, 255.99609375, 244.953125)], [95, 154, (252.984375, 255.99609375, 244.953125)], [96, 154, (252.984375, 255.99609375, 244.953125)], [97, 154, (252.984375, 255.99609375, 244.953125)], [98, 153, (252.984375, 255.99609375, 244.953125)], [100, 153, (252.984375, 255.99609375, 244.953125)], [102, 153, (252.984375, 255.99609375, 244.953125)], [103, 152, (252.984375, 255.99609375, 244.953125)], [104, 152, (252.984375, 255.99609375, 244.953125)], [105, 152, (252.984375, 255.99609375, 244.953125)], [106, 152, (252.984375, 255.99609375, 244.953125)], [107, 152, (252.984375, 255.99609375, 244.953125)], [109, 152, (252.984375, 255.99609375, 244.953125)], [110, 152, (252.984375, 255.99609375, 244.953125)], [112, 152, (252.984375, 255.99609375, 244.953125)], [113, 152, (252.984375, 255.99609375, 244.953125)], [115, 152, (252.984375, 255.99609375, 244.953125)], [117, 152, (252.984375, 255.99609375, 244.953125)], [119, 152, (252.984375, 255.99609375, 244.953125)], [122, 152, (252.984375, 255.99609375, 244.953125)], [125, 152, (252.984375, 255.99609375, 244.953125)], [128, 152, (252.984375, 255.99609375, 244.953125)], [131, 152, (252.984375, 255.99609375, 244.953125)], [134, 152, (252.984375, 255.99609375, 244.953125)], [137, 152, (252.984375, 255.99609375, 244.953125)], [142, 152, (252.984375, 255.99609375, 244.953125)], [144, 152, (252.984375, 255.99609375, 244.953125)], [147, 152, (252.984375, 255.99609375, 244.953125)], [149, 151, (252.984375, 255.99609375, 244.953125)], [151, 151, (252.984375, 255.99609375, 244.953125)], [154, 150, (252.984375, 255.99609375, 244.953125)], [156, 149, (252.984375, 255.99609375, 244.953125)], [158, 149, (252.984375, 255.99609375, 244.953125)], [161, 148, (252.984375, 255.99609375, 244.953125)], [162, 147, (252.984375, 255.99609375, 244.953125)], [163, 146, (252.984375, 255.99609375, 244.953125)], [165, 145, (252.984375, 255.99609375, 244.953125)], [166, 144, (252.984375, 255.99609375, 244.953125)], [168, 143, (252.984375, 255.99609375, 244.953125)], [169, 142, (252.984375, 255.99609375, 244.953125)], [170, 141, (252.984375, 255.99609375, 244.953125)], [171, 141, (252.984375, 255.99609375, 244.953125)], [171, 140, (252.984375, 255.99609375, 244.953125)], [171, 139, (252.984375, 255.99609375, 244.953125)], [171, 138, (252.984375, 255.99609375, 244.953125)], [170, 137, (252.984375, 255.99609375, 244.953125)], [169, 136, (252.984375, 255.99609375, 244.953125)], [167, 135, (252.984375, 255.99609375, 244.953125)], [164, 134, (252.984375, 255.99609375, 244.953125)], [162, 132, (252.984375, 255.99609375, 244.953125)], [159, 131, (252.984375, 255.99609375, 244.953125)], [156, 129, (252.984375, 255.99609375, 244.953125)], [154, 128, (252.984375, 255.99609375, 244.953125)], [152, 127, (252.984375, 255.99609375, 244.953125)], [150, 126, (252.984375, 255.99609375, 244.953125)], [149, 125, (252.984375, 255.99609375, 244.953125)], [148, 125, (252.984375, 255.99609375, 244.953125)], [147, 125, (252.984375, 255.99609375, 244.953125)], [147, 124, (252.984375, 255.99609375, 244.953125)], [146, 124, (252.984375, 255.99609375, 244.953125)], [144, 123, (252.984375, 255.99609375, 244.953125)], [144, 122, (252.984375, 255.99609375, 244.953125)], [142, 121, (252.984375, 255.99609375, 244.953125)], [140, 119, (252.984375, 255.99609375, 244.953125)], [139, 118, (252.984375, 255.99609375, 244.953125)], [138, 116, (252.984375, 255.99609375, 244.953125)], [138, 115, (252.984375, 255.99609375, 244.953125)], [138, 114, (252.984375, 255.99609375, 244.953125)], [138, 113, (252.984375, 255.99609375, 244.953125)], [138, 112, (252.984375, 255.99609375, 244.953125)], [139, 111, (252.984375, 255.99609375, 244.953125)], [140, 111, (252.984375, 255.99609375, 244.953125)], [141, 110, (252.984375, 255.99609375, 244.953125)], [142, 110, (252.984375, 255.99609375, 244.953125)], [143, 110, (252.984375, 255.99609375, 244.953125)], [145, 110, (252.984375, 255.99609375, 244.953125)], [146, 109, (252.984375, 255.99609375, 244.953125)], [147, 109, (252.984375, 255.99609375, 244.953125)], [149, 108, (252.984375, 255.99609375, 244.953125)], [151, 107, (252.984375, 255.99609375, 244.953125)], [153, 106, (252.984375, 255.99609375, 244.953125)], [155, 105, (252.984375, 255.99609375, 244.953125)], [157, 103, (252.984375, 255.99609375, 244.953125)], [160, 102, (252.984375, 255.99609375, 244.953125)], [162, 101, (252.984375, 255.99609375, 244.953125)], [165, 99, (252.984375, 255.99609375, 244.953125)], [168, 96, (252.984375, 255.99609375, 244.953125)], [169, 95, (252.984375, 255.99609375, 244.953125)], [171, 94, (252.984375, 255.99609375, 244.953125)], [174, 91, (252.984375, 255.99609375, 244.953125)], [176, 90, (252.984375, 255.99609375, 244.953125)], [177, 88, (252.984375, 255.99609375, 244.953125)], [179, 86, (252.984375, 255.99609375, 244.953125)], [180, 84, (252.984375, 255.99609375, 244.953125)], [181, 83, (252.984375, 255.99609375, 244.953125)], [181, 81, (252.984375, 255.99609375, 244.953125)], [181, 79, (252.984375, 255.99609375, 244.953125)], [181, 77, (252.984375, 255.99609375, 244.953125)], [181, 75, (252.984375, 255.99609375, 244.953125)], [181, 74, (252.984375, 255.99609375, 244.953125)], [180, 74, (252.984375, 255.99609375, 244.953125)], [179, 74, (252.984375, 255.99609375, 244.953125)], [176, 74, (252.984375, 255.99609375, 244.953125)], [173, 74, (252.984375, 255.99609375, 244.953125)], [171, 74, (252.984375, 255.99609375, 244.953125)], [170, 74, (252.984375, 255.99609375, 244.953125)], [169, 74, (252.984375, 255.99609375, 244.953125)], [167, 75, (252.984375, 255.99609375, 244.953125)], [165, 75, (252.984375, 255.99609375, 244.953125)], [162, 75, (252.984375, 255.99609375, 244.953125)], [160, 75, (252.984375, 255.99609375, 244.953125)], [158, 75, (252.984375, 255.99609375, 244.953125)], [156, 75, (252.984375, 255.99609375, 244.953125)], [155, 75, (252.984375, 255.99609375, 244.953125)], [154, 75, (252.984375, 255.99609375, 244.953125)], [153, 75, (252.984375, 255.99609375, 244.953125)], [152, 75, (252.984375, 255.99609375, 244.953125)], [151, 75, (252.984375, 255.99609375, 244.953125)], [150, 75, (252.984375, 255.99609375, 244.953125)], [150, 74, (252.984375, 255.99609375, 244.953125)], [149, 74, (252.984375, 255.99609375, 244.953125)], [149, 73, (252.984375, 255.99609375, 244.953125)], [148, 72, (252.984375, 255.99609375, 244.953125)], [148, 71, (252.984375, 255.99609375, 244.953125)], [148, 70, (252.984375, 255.99609375, 244.953125)], [148, 69, (252.984375, 255.99609375, 244.953125)], [148, 68, (252.984375, 255.99609375, 244.953125)], [148, 67, (252.984375, 255.99609375, 244.953125)], [148, 65, (252.984375, 255.99609375, 244.953125)], [148, 64, (252.984375, 255.99609375, 244.953125)], [148, 62, (252.984375, 255.99609375, 244.953125)], [148, 61, (252.984375, 255.99609375, 244.953125)], [148, 59, (252.984375, 255.99609375, 244.953125)], [148, 58, (252.984375, 255.99609375, 244.953125)], [148, 57, (252.984375, 255.99609375, 244.953125)], [148, 56, (252.984375, 255.99609375, 244.953125)], [149, 54, (252.984375, 255.99609375, 244.953125)], [150, 52, (252.984375, 255.99609375, 244.953125)], [151, 49, (252.984375, 255.99609375, 244.953125)], [153, 46, (252.984375, 255.99609375, 244.953125)], [155, 44, (252.984375, 255.99609375, 244.953125)], [156, 42, (252.984375, 255.99609375, 244.953125)], [158, 39, (252.984375, 255.99609375, 244.953125)], [160, 37, (252.984375, 255.99609375, 244.953125)], [162, 35, (252.984375, 255.99609375, 244.953125)], [163, 33, (252.984375, 255.99609375, 244.953125)], [164, 31, (252.984375, 255.99609375, 244.953125)], [165, 29, (252.984375, 255.99609375, 244.953125)], [166, 27, (252.984375, 255.99609375, 244.953125)], [167, 26, (252.984375, 255.99609375, 244.953125)], [167, 25, (252.984375, 255.99609375, 244.953125)], [168, 22, (252.984375, 255.99609375, 244.953125)], [169, 20, (252.984375, 255.99609375, 244.953125)], [169, 19, (252.984375, 255.99609375, 244.953125)], [169, 17, (252.984375, 255.99609375, 244.953125)], [169, 15, (252.984375, 255.99609375, 244.953125)], [168, 14, (252.984375, 255.99609375, 244.953125)], [167, 14, (252.984375, 255.99609375, 244.953125)], [165, 13, (252.984375, 255.99609375, 244.953125)], [162, 13, (252.984375, 255.99609375, 244.953125)], [159, 13, (252.984375, 255.99609375, 244.953125)], [156, 13, (252.984375, 255.99609375, 244.953125)], [153, 14, (252.984375, 255.99609375, 244.953125)], [151, 16, (252.984375, 255.99609375, 244.953125)], [150, 17, (252.984375, 255.99609375, 244.953125)], [149, 17, (252.984375, 255.99609375, 244.953125)], [148, 18, (252.984375, 255.99609375, 244.953125)], [147, 19, (252.984375, 255.99609375, 244.953125)], [146, 20, (252.984375, 255.99609375, 244.953125)], [144, 22, (252.984375, 255.99609375, 244.953125)], [142, 23, (252.984375, 255.99609375, 244.953125)], [139, 25, (252.984375, 255.99609375, 244.953125)], [137, 27, (252.984375, 255.99609375, 244.953125)], [136, 29, (252.984375, 255.99609375, 244.953125)], [135, 30, (252.984375, 255.99609375, 244.953125)], [133, 31, (252.984375, 255.99609375, 244.953125)], [132, 32, (252.984375, 255.99609375, 244.953125)], [131, 33, (252.984375, 255.99609375, 244.953125)], [130, 33, (252.984375, 255.99609375, 244.953125)], [129, 33, (252.984375, 255.99609375, 244.953125)], [128, 33, (252.984375, 255.99609375, 244.953125)], [128, 32, (252.984375, 255.99609375, 244.953125)], [127, 32, (252.984375, 255.99609375, 244.953125)], [126, 32, (252.984375, 255.99609375, 244.953125)], [125, 31, (252.984375, 255.99609375, 244.953125)], [123, 30, (252.984375, 255.99609375, 244.953125)], [121, 29, (252.984375, 255.99609375, 244.953125)], [119, 29, (252.984375, 255.99609375, 244.953125)], [117, 28, (252.984375, 255.99609375, 244.953125)], [115, 27, (252.984375, 255.99609375, 244.953125)], [114, 27, (252.984375, 255.99609375, 244.953125)], [113, 26, (252.984375, 255.99609375, 244.953125)], [112, 25, (252.984375, 255.99609375, 244.953125)], [110, 25, (252.984375, 255.99609375, 244.953125)], [110, 24, (252.984375, 255.99609375, 244.953125)], [108, 23, (252.984375, 255.99609375, 244.953125)], [107, 21, (252.984375, 255.99609375, 244.953125)], [106, 19, (252.984375, 255.99609375, 244.953125)], [105, 18, (252.984375, 255.99609375, 244.953125)], [104, 17, (252.984375, 255.99609375, 244.953125)], [103, 16, (252.984375, 255.99609375, 244.953125)], [102, 16, (252.984375, 255.99609375, 244.953125)], [101, 15, (252.984375, 255.99609375, 244.953125)], [100, 15, (252.984375, 255.99609375, 244.953125)], [100, 14, (252.984375, 255.99609375, 244.953125)], [98, 14, (252.984375, 255.99609375, 244.953125)], [97, 14, (252.984375, 255.99609375, 244.953125)], [96, 13, (252.984375, 255.99609375, 244.953125)], [95, 13, (252.984375, 255.99609375, 244.953125)], [94, 13, (252.984375, 255.99609375, 244.953125)], [93, 12, (252.984375, 255.99609375, 244.953125)], [92, 12, (252.984375, 255.99609375, 244.953125)], [90, 11, (252.984375, 255.99609375, 244.953125)], [88, 11, (252.984375, 255.99609375, 244.953125)], [86, 10, (252.984375, 255.99609375, 244.953125)], [85, 10, (252.984375, 255.99609375, 244.953125)], [84, 10, (252.984375, 255.99609375, 244.953125)], [83, 9, (252.984375, 255.99609375, 244.953125)], [82, 8, (252.984375, 255.99609375, 244.953125)], [81, 8, (252.984375, 255.99609375, 244.953125)], [80, 8, (252.984375, 255.99609375, 244.953125)], [79, 7, (252.984375, 255.99609375, 244.953125)], [78, 6, (252.984375, 255.99609375, 244.953125)], [77, 6, (252.984375, 255.99609375, 244.953125)], [76, 6, (252.984375, 255.99609375, 244.953125)], [76, 5, (252.984375, 255.99609375, 244.953125)], [75, 5, (252.984375, 255.99609375, 244.953125)], [74, 4, (252.984375, 255.99609375, 244.953125)], [73, 4, (252.984375, 255.99609375, 244.953125)], [72, 3, (252.984375, 255.99609375, 244.953125)], [71, 3, (252.984375, 255.99609375, 244.953125)], [70, 3, (252.984375, 255.99609375, 244.953125)], [69, 3, (252.984375, 255.99609375, 244.953125)], [68, 3, (252.984375, 255.99609375, 244.953125)], [67, 3, (252.984375, 255.99609375, 244.953125)], [66, 3, (252.984375, 255.99609375, 244.953125)], [65, 3, (252.984375, 255.99609375, 244.953125)], [64, 3, (252.984375, 255.99609375, 244.953125)], [64, 2, (252.984375, 255.99609375, 244.953125)], [63, 2, (252.984375, 255.99609375, 244.953125)], [62, 2, (252.984375, 255.99609375, 244.953125)], [61, 2, (252.984375, 255.99609375, 244.953125)], [59, 2, (252.984375, 255.99609375, 244.953125)], [58, 2, (252.984375, 255.99609375, 244.953125)], [57, 1, (252.984375, 255.99609375, 244.953125)], [56, 1, (252.984375, 255.99609375, 244.953125)], [55, 1, (252.984375, 255.99609375, 244.953125)], [54, 1, (252.984375, 255.99609375, 244.953125)], [53, 1, (252.984375, 255.99609375, 244.953125)], [52, 1, (252.984375, 255.99609375, 244.953125)], [51, 1, (252.984375, 255.99609375, 244.953125)], [50, 1, (252.984375, 255.99609375, 244.953125)], [48, 1, (252.984375, 255.99609375, 244.953125)], [46, 1, (252.984375, 255.99609375, 244.953125)], [45, 1, (252.984375, 255.99609375, 244.953125)], [44, 1, (252.984375, 255.99609375, 244.953125)], [43, 1, (252.984375, 255.99609375, 244.953125)], [41, 1, (252.984375, 255.99609375, 244.953125)], [40, 1, (252.984375, 255.99609375, 244.953125)], [39, 1, (252.984375, 255.99609375, 244.953125)], [37, 1, (252.984375, 255.99609375, 244.953125)], [36, 1, (252.984375, 255.99609375, 244.953125)], [35, 1, (252.984375, 255.99609375, 244.953125)], [34, 1, (252.984375, 255.99609375, 244.953125)], [33, 1, (252.984375, 255.99609375, 244.953125)], [32, 1, (252.984375, 255.99609375, 244.953125)], [31, 1, (252.984375, 255.99609375, 244.953125)], [30, 1, (252.984375, 255.99609375, 244.953125)], [29, 1, (252.984375, 255.99609375, 244.953125)], [27, 2, (252.984375, 255.99609375, 244.953125)], [26, 2, (252.984375, 255.99609375, 244.953125)], [25, 3, (252.984375, 255.99609375, 244.953125)], [24, 3, (252.984375, 255.99609375, 244.953125)], [23, 3, (252.984375, 255.99609375, 244.953125)], [21, 4, (252.984375, 255.99609375, 244.953125)], [20, 4, (252.984375, 255.99609375, 244.953125)], [19, 5, (252.984375, 255.99609375, 244.953125)], [18, 5, (252.984375, 255.99609375, 244.953125)], [17, 5, (252.984375, 255.99609375, 244.953125)], [16, 5, (252.984375, 255.99609375, 244.953125)], [16, 6, (252.984375, 255.99609375, 244.953125)], [15, 6, (252.984375, 255.99609375, 244.953125)], [14, 6, (252.984375, 255.99609375, 244.953125)], [13, 6, (252.984375, 255.99609375, 244.953125)], [13, 7, (252.984375, 255.99609375, 244.953125)], [12, 7, (252.984375, 255.99609375, 244.953125)], [11, 7, (252.984375, 255.99609375, 244.953125)], [11, 8, (252.984375, 255.99609375, 244.953125)], [10, 8, (252.984375, 255.99609375, 244.953125)], [9, 8, (252.984375, 255.99609375, 244.953125)], [9, 9, (252.984375, 255.99609375, 244.953125)], [12, 9, (252.984375, 255.99609375, 244.953125)], [6, 17, (252.984375, 255.99609375, 244.953125)], [6, 19, (252.984375, 255.99609375, 244.953125)], [6, 20, (252.984375, 255.99609375, 244.953125)], [6, 21, (252.984375, 255.99609375, 244.953125)], [6, 23, (252.984375, 255.99609375, 244.953125)], [6, 24, (252.984375, 255.99609375, 244.953125)], [6, 26, (252.984375, 255.99609375, 244.953125)], [6, 27, (252.984375, 255.99609375, 244.953125)], [6, 29, (252.984375, 255.99609375, 244.953125)], [6, 30, (252.984375, 255.99609375, 244.953125)], [6, 32, (252.984375, 255.99609375, 244.953125)], [6, 34, (252.984375, 255.99609375, 244.953125)], [6, 35, (252.984375, 255.99609375, 244.953125)], [6, 36, (252.984375, 255.99609375, 244.953125)], [6, 37, (252.984375, 255.99609375, 244.953125)], [6, 38, (252.984375, 255.99609375, 244.953125)], [6, 39, (252.984375, 255.99609375, 244.953125)], [6, 40, (252.984375, 255.99609375, 244.953125)], [6, 41, (252.984375, 255.99609375, 244.953125)], [6, 42, (252.984375, 255.99609375, 244.953125)], [6, 43, (252.984375, 255.99609375, 244.953125)], [6, 44, (252.984375, 255.99609375, 244.953125)], [6, 45, (252.984375, 255.99609375, 244.953125)], [6, 46, (252.984375, 255.99609375, 244.953125)], [6, 47, (252.984375, 255.99609375, 244.953125)], [6, 48, (252.984375, 255.99609375, 244.953125)], [6, 49, (252.984375, 255.99609375, 244.953125)], [6, 50, (252.984375, 255.99609375, 244.953125)], [6, 51, (252.984375, 255.99609375, 244.953125)], [6, 52, (252.984375, 255.99609375, 244.953125)], [6, 53, (252.984375, 255.99609375, 244.953125)], [6, 54, (252.984375, 255.99609375, 244.953125)], [6, 55, (252.984375, 255.99609375, 244.953125)], [6, 56, (252.984375, 255.99609375, 244.953125)], [6, 57, (252.984375, 255.99609375, 244.953125)], [6, 58, (252.984375, 255.99609375, 244.953125)], [6, 59, (252.984375, 255.99609375, 244.953125)], [6, 60, (252.984375, 255.99609375, 244.953125)], [5, 60, (252.984375, 255.99609375, 244.953125)], [5, 61, (252.984375, 255.99609375, 244.953125)], [5, 62, (252.984375, 255.99609375, 244.953125)], [5, 63, (252.984375, 255.99609375, 244.953125)], [5, 64, (252.984375, 255.99609375, 244.953125)], [5, 65, (252.984375, 255.99609375, 244.953125)], [4, 66, (252.984375, 255.99609375, 244.953125)], [4, 67, (252.984375, 255.99609375, 244.953125)], [4, 69, (252.984375, 255.99609375, 244.953125)], [4, 70, (252.984375, 255.99609375, 244.953125)], [3, 71, (252.984375, 255.99609375, 244.953125)], [3, 72, (252.984375, 255.99609375, 244.953125)], [3, 74, (252.984375, 255.99609375, 244.953125)], [3, 75, (252.984375, 255.99609375, 244.953125)], [3, 76, (252.984375, 255.99609375, 244.953125)], [3, 77, (252.984375, 255.99609375, 244.953125)], [3, 78, (252.984375, 255.99609375, 244.953125)], [3, 79, (252.984375, 255.99609375, 244.953125)], [3, 80, (252.984375, 255.99609375, 244.953125)], [3, 81, (252.984375, 255.99609375, 244.953125)], [3, 82, (252.984375, 255.99609375, 244.953125)], [3, 83, (252.984375, 255.99609375, 244.953125)], [3, 84, (252.984375, 255.99609375, 244.953125)], [3, 85, (252.984375, 255.99609375, 244.953125)], [3, 86, (252.984375, 255.99609375, 244.953125)], [3, 87, (252.984375, 255.99609375, 244.953125)], [3, 88, (252.984375, 255.99609375, 244.953125)], [3, 89, (252.984375, 255.99609375, 244.953125)], [4, 90, (252.984375, 255.99609375, 244.953125)], [4, 91, (252.984375, 255.99609375, 244.953125)], [4, 92, (252.984375, 255.99609375, 244.953125)], [4, 93, (252.984375, 255.99609375, 244.953125)], [4, 94, (252.984375, 255.99609375, 244.953125)], [5, 94, (252.984375, 255.99609375, 244.953125)], [5, 95, (252.984375, 255.99609375, 244.953125)], [5, 97, (252.984375, 255.99609375, 244.953125)], [5, 98, (252.984375, 255.99609375, 244.953125)], [5, 99, (252.984375, 255.99609375, 244.953125)], [5, 100, (252.984375, 255.99609375, 244.953125)], [5, 101, (252.984375, 255.99609375, 244.953125)], [5, 102, (252.984375, 255.99609375, 244.953125)], [5, 104, (252.984375, 255.99609375, 244.953125)], [5, 105, (252.984375, 255.99609375, 244.953125)], [5, 106, (252.984375, 255.99609375, 244.953125)], [5, 107, (252.984375, 255.99609375, 244.953125)], [5, 108, (252.984375, 255.99609375, 244.953125)], [5, 109, (252.984375, 255.99609375, 244.953125)], [5, 111, (252.984375, 255.99609375, 244.953125)], [4, 112, (252.984375, 255.99609375, 244.953125)], [4, 113, (252.984375, 255.99609375, 244.953125)], [4, 114, (252.984375, 255.99609375, 244.953125)], [4, 115, (252.984375, 255.99609375, 244.953125)], [4, 116, (252.984375, 255.99609375, 244.953125)], [4, 117, (252.984375, 255.99609375, 244.953125)], [4, 118, (252.984375, 255.99609375, 244.953125)], [4, 119, (252.984375, 255.99609375, 244.953125)], [4, 120, (252.984375, 255.99609375, 244.953125)], [4, 121, (252.984375, 255.99609375, 244.953125)], [4, 122, (252.984375, 255.99609375, 244.953125)], [4, 123, (252.984375, 255.99609375, 244.953125)], [4, 124, (252.984375, 255.99609375, 244.953125)], [4, 125, (252.984375, 255.99609375, 244.953125)], [4, 126, (252.984375, 255.99609375, 244.953125)], [4, 127, (252.984375, 255.99609375, 244.953125)], [4, 128, (252.984375, 255.99609375, 244.953125)], [4, 129, (252.984375, 255.99609375, 244.953125)], [4, 130, (252.984375, 255.99609375, 244.953125)], [4, 131, (252.984375, 255.99609375, 244.953125)], [4, 132, (252.984375, 255.99609375, 244.953125)], [4, 133, (252.984375, 255.99609375, 244.953125)], [4, 135, (252.984375, 255.99609375, 244.953125)], [4, 136, (252.984375, 255.99609375, 244.953125)], [4, 137, (252.984375, 255.99609375, 244.953125)], [4, 138, (252.984375, 255.99609375, 244.953125)], [4, 139, (252.984375, 255.99609375, 244.953125)], [4, 140, (252.984375, 255.99609375, 244.953125)], [4, 141, (252.984375, 255.99609375, 244.953125)], [4, 142, (252.984375, 255.99609375, 244.953125)], [4, 143, (252.984375, 255.99609375, 244.953125)], [4, 144, (252.984375, 255.99609375, 244.953125)], [4, 145, (252.984375, 255.99609375, 244.953125)], [3, 145, (252.984375, 255.99609375, 244.953125)], [2, 144, (252.984375, 255.99609375, 244.953125)]]
# source_image = "./images/method2_example/m2_color_origin_example1.bmp"
# op = ColorizationByOptimization(Image.open(source_image).resize((166,200)))
# for each in interactive_list:
#     op.manual_color(each[0],each[1],each[2])
# result_bgr = op.colorization(is_recolor=False)
# cv2.imshow("color-sample",result_bgr)
# cv2.waitKey(0)


# Case4: 交互式指定进行彩色图像重上色
# 以下recolor_area为准备好的重上色区域数据，实际应用中以交互进行指定
# 以下interactive_list为准备好的测试交互数据，实际应用中可以通过不停的调用manual_color函数进行设置

# recolor_area_info = {'target_row1': 68, 'target_row2': 182, 'target_col1': 32, 'target_col2': 130}
# interactive_list = [[92, 65, (0.0, 194.7578125, 0.0)], [93, 65, (0.0, 194.7578125, 0.0)], [95, 63, (0.0, 194.7578125, 0.0)], [97, 60, (0.0, 194.7578125, 0.0)], [98, 60, (0.0, 194.7578125, 0.0)], [98, 59, (0.0, 194.7578125, 0.0)], [100, 58, (0.0, 194.7578125, 0.0)], [101, 57, (0.0, 194.7578125, 0.0)], [102, 56, (0.0, 194.7578125, 0.0)], [103, 55, (0.0, 194.7578125, 0.0)], [104, 55, (0.0, 194.7578125, 0.0)], [104, 54, (0.0, 194.7578125, 0.0)], [105, 54, (0.0, 194.7578125, 0.0)], [106, 53, (0.0, 194.7578125, 0.0)], [107, 53, (0.0, 194.7578125, 0.0)], [108, 52, (0.0, 194.7578125, 0.0)], [109, 52, (0.0, 194.7578125, 0.0)], [110, 52, (0.0, 194.7578125, 0.0)], [111, 52, (0.0, 194.7578125, 0.0)], [112, 52, (0.0, 194.7578125, 0.0)], [113, 52, (0.0, 194.7578125, 0.0)], [114, 52, (0.0, 194.7578125, 0.0)], [115, 52, (0.0, 194.7578125, 0.0)], [116, 52, (0.0, 194.7578125, 0.0)], [117, 52, (0.0, 194.7578125, 0.0)], [119, 52, (0.0, 194.7578125, 0.0)], [120, 52, (0.0, 194.7578125, 0.0)], [122, 52, (0.0, 194.7578125, 0.0)], [123, 52, (0.0, 194.7578125, 0.0)], [124, 52, (0.0, 194.7578125, 0.0)], [125, 52, (0.0, 194.7578125, 0.0)], [126, 52, (0.0, 194.7578125, 0.0)], [127, 52, (0.0, 194.7578125, 0.0)], [128, 52, (0.0, 194.7578125, 0.0)], [129, 52, (0.0, 194.7578125, 0.0)], [130, 52, (0.0, 194.7578125, 0.0)], [89, 100, (0.0, 236.921875, 0.0)], [90, 100, (0.0, 236.921875, 0.0)], [92, 100, (0.0, 236.921875, 0.0)], [93, 100, (0.0, 236.921875, 0.0)], [94, 100, (0.0, 236.921875, 0.0)], [96, 100, (0.0, 236.921875, 0.0)], [97, 101, (0.0, 236.921875, 0.0)], [98, 101, (0.0, 236.921875, 0.0)], [100, 102, (0.0, 236.921875, 0.0)], [102, 102, (0.0, 236.921875, 0.0)], [104, 103, (0.0, 236.921875, 0.0)], [106, 104, (0.0, 236.921875, 0.0)], [107, 104, (0.0, 236.921875, 0.0)], [108, 105, (0.0, 236.921875, 0.0)], [109, 105, (0.0, 236.921875, 0.0)], [110, 106, (0.0, 236.921875, 0.0)], [111, 106, (0.0, 236.921875, 0.0)], [112, 106, (0.0, 236.921875, 0.0)], [114, 107, (0.0, 236.921875, 0.0)], [115, 107, (0.0, 236.921875, 0.0)], [117, 108, (0.0, 236.921875, 0.0)], [118, 108, (0.0, 236.921875, 0.0)], [119, 108, (0.0, 236.921875, 0.0)], [120, 109, (0.0, 236.921875, 0.0)], [121, 109, (0.0, 236.921875, 0.0)], [122, 109, (0.0, 236.921875, 0.0)], [123, 109, (0.0, 236.921875, 0.0)], [124, 109, (0.0, 236.921875, 0.0)], [125, 109, (0.0, 236.921875, 0.0)], [126, 109, (0.0, 236.921875, 0.0)], [127, 109, (0.0, 236.921875, 0.0)], [127, 108, (0.0, 236.921875, 0.0)], [128, 108, (0.0, 236.921875, 0.0)], [129, 108, (0.0, 236.921875, 0.0)], [130, 108, (0.0, 236.921875, 0.0)], [130, 107, (0.0, 236.921875, 0.0)], [129, 107, (0.0, 236.921875, 0.0)], [149, 102, (0.0, 236.921875, 0.0)], [149, 99, (0.0, 236.921875, 0.0)], [149, 94, (0.0, 236.921875, 0.0)], [149, 92, (0.0, 236.921875, 0.0)], [149, 91, (0.0, 236.921875, 0.0)], [149, 87, (0.0, 236.921875, 0.0)], [150, 84, (0.0, 236.921875, 0.0)], [150, 81, (0.0, 236.921875, 0.0)], [151, 79, (0.0, 236.921875, 0.0)], [152, 77, (0.0, 236.921875, 0.0)], [152, 74, (0.0, 236.921875, 0.0)], [152, 72, (0.0, 236.921875, 0.0)], [153, 70, (0.0, 236.921875, 0.0)], [153, 68, (0.0, 236.921875, 0.0)], [153, 66, (0.0, 236.921875, 0.0)], [153, 64, (0.0, 236.921875, 0.0)], [153, 63, (0.0, 236.921875, 0.0)], [153, 62, (0.0, 236.921875, 0.0)], [153, 61, (0.0, 236.921875, 0.0)], [152, 61, (0.0, 236.921875, 0.0)], [151, 61, (0.0, 236.921875, 0.0)], [72, 115, (236.921875, 255.99609375, 232.90625)], [73, 116, (236.921875, 255.99609375, 232.90625)], [74, 117, (236.921875, 255.99609375, 232.90625)], [74, 118, (236.921875, 255.99609375, 232.90625)], [75, 118, (236.921875, 255.99609375, 232.90625)], [75, 119, (236.921875, 255.99609375, 232.90625)], [76, 119, (236.921875, 255.99609375, 232.90625)], [76, 120, (236.921875, 255.99609375, 232.90625)], [77, 120, (236.921875, 255.99609375, 232.90625)], [78, 120, (236.921875, 255.99609375, 232.90625)], [78, 121, (236.921875, 255.99609375, 232.90625)], [79, 121, (236.921875, 255.99609375, 232.90625)], [80, 121, (236.921875, 255.99609375, 232.90625)], [80, 122, (236.921875, 255.99609375, 232.90625)], [81, 122, (236.921875, 255.99609375, 232.90625)], [82, 122, (236.921875, 255.99609375, 232.90625)], [83, 122, (236.921875, 255.99609375, 232.90625)], [74, 48, (236.921875, 255.99609375, 232.90625)], [74, 47, (236.921875, 255.99609375, 232.90625)], [75, 47, (236.921875, 255.99609375, 232.90625)], [76, 45, (236.921875, 255.99609375, 232.90625)], [77, 44, (236.921875, 255.99609375, 232.90625)], [77, 43, (236.921875, 255.99609375, 232.90625)], [78, 43, (236.921875, 255.99609375, 232.90625)], [78, 42, (236.921875, 255.99609375, 232.90625)], [79, 42, (236.921875, 255.99609375, 232.90625)], [79, 41, (236.921875, 255.99609375, 232.90625)], [80, 41, (236.921875, 255.99609375, 232.90625)], [80, 40, (236.921875, 255.99609375, 232.90625)], [81, 40, (236.921875, 255.99609375, 232.90625)], [82, 40, (236.921875, 255.99609375, 232.90625)], [82, 39, (236.921875, 255.99609375, 232.90625)], [83, 39, (236.921875, 255.99609375, 232.90625)], [83, 38, (236.921875, 255.99609375, 232.90625)], [84, 38, (236.921875, 255.99609375, 232.90625)], [84, 37, (236.921875, 255.99609375, 232.90625)], [85, 37, (236.921875, 255.99609375, 232.90625)], [86, 37, (236.921875, 255.99609375, 232.90625)], [87, 37, (236.921875, 255.99609375, 232.90625)], [88, 37, (236.921875, 255.99609375, 232.90625)], [88, 36, (236.921875, 255.99609375, 232.90625)], [89, 36, (236.921875, 255.99609375, 232.90625)], [90, 36, (236.921875, 255.99609375, 232.90625)], [91, 36, (236.921875, 255.99609375, 232.90625)], [166, 37, (236.921875, 255.99609375, 232.90625)], [169, 37, (236.921875, 255.99609375, 232.90625)], [170, 37, (236.921875, 255.99609375, 232.90625)], [172, 38, (236.921875, 255.99609375, 232.90625)], [173, 39, (236.921875, 255.99609375, 232.90625)], [174, 39, (236.921875, 255.99609375, 232.90625)], [174, 40, (236.921875, 255.99609375, 232.90625)], [175, 41, (236.921875, 255.99609375, 232.90625)], [176, 42, (236.921875, 255.99609375, 232.90625)], [176, 43, (236.921875, 255.99609375, 232.90625)], [176, 44, (236.921875, 255.99609375, 232.90625)], [176, 45, (236.921875, 255.99609375, 232.90625)], [176, 46, (236.921875, 255.99609375, 232.90625)], [176, 47, (236.921875, 255.99609375, 232.90625)], [176, 48, (236.921875, 255.99609375, 232.90625)], [176, 49, (236.921875, 255.99609375, 232.90625)], [175, 49, (236.921875, 255.99609375, 232.90625)], [166, 123, (236.921875, 255.99609375, 232.90625)], [166, 121, (236.921875, 255.99609375, 232.90625)], [167, 120, (236.921875, 255.99609375, 232.90625)], [167, 119, (236.921875, 255.99609375, 232.90625)], [167, 118, (236.921875, 255.99609375, 232.90625)], [168, 118, (236.921875, 255.99609375, 232.90625)], [168, 117, (236.921875, 255.99609375, 232.90625)], [169, 117, (236.921875, 255.99609375, 232.90625)], [169, 116, (236.921875, 255.99609375, 232.90625)], [170, 116, (236.921875, 255.99609375, 232.90625)], [170, 115, (236.921875, 255.99609375, 232.90625)], [171, 115, (236.921875, 255.99609375, 232.90625)], [172, 115, (236.921875, 255.99609375, 232.90625)], [173, 115, (236.921875, 255.99609375, 232.90625)], [173, 114, (236.921875, 255.99609375, 232.90625)]]
# source_image = "./images/method2_example/m2_recolor_origin_example1.bmp"
# op = ColorizationByOptimization(Image.open(source_image).resize((266,200)))
# for each in interactive_list:
#     op.manual_color(each[0],each[1],each[2])
# op.set_recolor_area(recolor_area_info["target_row1"], recolor_area_info["target_row2"],
#                               recolor_area_info["target_col1"], recolor_area_info["target_col2"])
# result_bgr = op.colorization(is_recolor=True, debug_mode=False)
# cv2.imshow("recolor-sample",result_bgr)
# cv2.waitKey(0)



